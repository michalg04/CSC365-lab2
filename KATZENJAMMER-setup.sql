DROP TABLE IF EXISTS Instruments;
DROP TABLE IF EXISTS Performance;
DROP TABLE IF EXISTS Tracklists;
DROP TABLE IF EXISTS Vocals;
DROP TABLE IF EXISTS Band;
DROP TABLE IF EXISTS Songs;
DROP TABLE IF EXISTS Albums;

CREATE TABLE Albums(
AId INTEGER PRIMARY KEY,
Title VARCHAR(15) NOT NULL,
`Year` INTEGER NOT NULL,
Label VARCHAR(15),
`Type` VARCHAR(10)
);

CREATE TABLE Band(
Id INTEGER PRIMARY KEY,
Firstname VARCHAR(20),
Lastname VARCHAR(20)
);

CREATE TABLE Songs(
SongId INTEGER PRIMARY KEY,
Title VARCHAR(15) NOT NULL
);

CREATE TABLE Instruments(
SongId INTEGER NOT NULL,
BandmateId INTEGER NOT NULL,
Instrument VARCHAR(20) NOT NULL,
FOREIGN KEY (SongId) REFERENCES Songs (SongId),
FOREIGN KEY (BandmateId) REFERENCES Band (Id),
PRIMARY KEY(SongId, BandmateId, Instrument)
);

CREATE TABLE Performance(
SongId INTEGER NOT NULL,
BandmateId INTEGER NOT NULL,
StagePosition VARCHAR(10),
FOREIGN KEY (SongId) REFERENCES Songs (SongId),
FOREIGN KEY (BandmateId) REFERENCES Band (Id),
PRIMARY KEY(SongId, BandmateId)
);

CREATE TABLE Tracklists(
AlbumId INTEGER NOT NULL,
Position INTEGER,
SongId INTEGER NOT NULL,
FOREIGN KEY (AlbumId) REFERENCES Albums (AId),
FOREIGN KEY (SongId) REFERENCES Songs (SongId),
PRIMARY KEY(AlbumId, SongId)
);

CREATE TABLE Vocals(
SongId INTEGER NOT NULL,
Bandmate INTEGER NOT NULL,
`Type` VARCHAR(20) NOT NULL,
FOREIGN KEY (SongId) REFERENCES Songs (SongId),
FOREIGN KEY (Bandmate) REFERENCES Band (Id),
PRIMARY KEY(SongId, Bandmate,`Type`)
);